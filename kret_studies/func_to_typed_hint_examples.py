# Examples for func_to_typed_hint_llm
examples = [
    {"input": "def foo(a: int, b: str = 'x') -> None:", "output": "{'a': int, 'b': str}"},
    {"input": "def bar(x: float, y: int | None = None) -> float:", "output": "{'x': float, 'y': Optional[int]}"},
    {"input": "def baz(mode: Literal['fast', 'slow'] = 'fast') -> str:", "output": "{'mode': Literal['fast', 'slow']}"},
    {"input": "def qux(flag: bool = False, count: int = 0) -> bool:", "output": "{'flag': bool, 'count': int}"},
    {
        "input": """@utils.log_indent_decorator\ndef download(tickers, start=None, end=None, actions=False, threads=True,\n             ignore_tz=None, group_by=\'column\', auto_adjust=None, back_adjust=False,\n             repair=False, keepna=False, progress=True, period=\"max\", interval=\"1d\",\n             prepost=False, proxy=_SENTINEL_, rounding=False, timeout=10, session=None,\n             multi_level_index=True) -> Union[_pd.DataFrame, None]:\n    \"\"\"\n    Download yahoo tickers\n    :Parameters:\n        tickers : str, list\n            List of tickers to download\n        period : str\n            Valid periods: 1d,5d,1mo,3mo,6mo,1y,2y,5y,10y,ytd,max\n            Either Use period parameter or use start and end\n        interval : str\n            Valid intervals: 1m,2m,5m,15m,30m,60m,90m,1h,1d,5d,1wk,1mo,3mo\n            Intraday data cannot extend last 60 days\n        start: str\n            Download start date string (YYYY-MM-DD) or _datetime, inclusive.\n            Default is 99 years ago\n            E.g. for start=\"2020-01-01\", the first data point will be on \"2020-01-01\"\n        end: str\n            Download end date string (YYYY-MM-DD) or _datetime, exclusive.\n            Default is now\n            E.g. for end=\"2023-01-01\", the last data point will be on \"2022-12-31\"\n        group_by : str\n            Group by 'ticker' or 'column' (default)\n        prepost : bool\n            Include Pre and Post market data in results?\n            Default is False\n        auto_adjust: bool\n            Adjust all OHLC automatically? Default is True\n        repair: bool\n            Detect currency unit 100x mixups and attempt repair\n            Default is False\n        keepna: bool\n            Keep NaN rows returned by Yahoo?\n            Default is False\n        actions: bool\n            Download dividend + stock splits data. Default is False\n        threads: bool / int\n            How many threads to use for mass downloading. Default is True\n    \"\"\"\n    pass""",
        "output": "{'tickers': str | list, 'start': str | None, 'end': str | None, 'actions': bool, 'threads': bool | int, 'ignore_tz': bool | None, 'group_by': str, 'auto_adjust': bool | None, 'back_adjust': Any, 'repair': bool, 'keepna': bool, 'progress': Any, 'period': Literal['1d', '5d', '1mo', '3mo', '6mo', '1y', '2y', '5y', '10y', 'ytd', 'max'], 'interval': Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1wk', '1mo', '3mo'], 'prepost': bool, 'proxy': Any, 'rounding': bool, 'timeout': None | float, 'session': None | Session, 'multi_level_index': bool}",
    },
    {
        "input": """class Download_TypedDict(t.TypedDict, total=False):\n    tickers: str | list[str]\n    start: str | None\n    end: str | None\n    actions: bool\n    threads: bool | int\n    ignore_tz: bool | None\n    group_by: str\n    auto_adjust: bool | None\n    back_adjust: t.Any\n    repair: bool\n    keepna: bool\n    progress: t.Any\n    period: t.Literal['1d', '5d', '1mo', '3mo', '6mo', '1y', '2y', '5y', '10y', 'ytd', 'max']\n    interval: t.Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1wk', '1mo', '3mo']\n    prepost: bool\n    proxy: t.Any\n    rounding: bool\n    timeout: None | float\n    session: None | Session\n    multi_level_index: bool\n""",
        "output": "{'tickers': str | list[str], 'start': str | None, 'end': str | None, 'actions': bool, 'threads': bool | int, 'ignore_tz': bool | None, 'group_by': str, 'auto_adjust': bool | None, 'back_adjust': Any, 'repair': bool, 'keepna': bool, 'progress': Any, 'period': Literal['1d', '5d', '1mo', '3mo', '6mo', '1y', '2y', '5y', '10y', 'ytd', 'max'], 'interval': Literal['1m', '2m', '5m', '15m', '30m', '60m', '90m', '1h', '1d', '5d', '1wk', '1mo', '3mo'], 'prepost': bool, 'proxy': Any, 'rounding': bool, 'timeout': None | float, 'session': None | Session, 'multi_level_index': bool}",
    },
]
